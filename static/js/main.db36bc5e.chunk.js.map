{"version":3,"sources":["helpers/ship_types.js","components/PopUpRules.js","components/SetupPlayerShips.js","helpers/computerTurnGenerator.js","components/GameOver.js","components/GameHandler.js","factories/gameboard.js","factories/ship.js","factories/player.js","components/AudioButton.js","App.js","index.js"],"names":["shipTypes","name","length","PopUp","handleClick","props","toggle","className","onClick","this","Component","SetupPlayerShips","togglePop","setState","seen","state","changeAxis","axis","createBoard","tileArray","i","push","occupyTiles","map","number","occupiedTiles","includes","id","onMouseOver","handleHover","onMouseLeave","handleLeave","checkForCollision","index","shipLength","parseInt","validShipPosition","e","currentShipLength","checkInvalidShipLocation","target","classList","allowClick","handleShipTileSpan","undefined","shipsToPlace","currentShipIndex","playerData","concat","shipName","currentShipName","shipLocation","shipTileSpan","currentTile","updatedShipTileSpan","Number","forEach","document","getElementById","playerName","ship_types","gameReady","bind","handlePlayerNameChange","event","value","attributes","resetBoardBackgroundColor","tileID","element","tile","contains","onSubmit","handleGameStart","type","onChange","width","gap","React","computerTurnGenerator","lastComputerShotIndex","lastComputerShotHit","lastComputerShotSunkShip","computerHitDirection","humanPlayer","targetCoordinate","cheatToFindIndex","humanPlayerShips","gameboard","ships","ship","hits","isSunk","lastHitOnShip","indexOfHitShip","position","findIndex","generateDirectionBasedOffCoordinates","generateRandomCoordinate","index1","index2","direction","generateRandomDirectionAndCoordinate","output","generateRandomDirection","calculateLegalMove","Math","floor","random","humanBoardArray","board","isShot","availableTiles","filter","calculatedIndex","generateCalculatedCoordinate","humanShips","checkForHitButNotSunkShips","recieveShot","checkForHit","checkIfSunk","checkIfAllShipsSunk","gameOver","gameOverMessage","lastShotHit","lastShotSunkShip","displayText","GameOver","computerWon","message","window","location","reload","GameHandler","playerType","occupyHumanTiles","occupyComputerTiles","cpuPlayer","hasShip","icon","faBomb","faTimes","timer","ms","Promise","res","setTimeout","activeTurn","simulateGameRound","enemyGameboard","handlePlayerTurn","computerTurn","indexOfShotShip","height","Gameboard","init","missedShots","console","log","hit","splice","Ship","every","occupiedCell","Player","initCPUBoard","initPlayerBoard","receiveShot","placeShip","cpuData","generateRandomShipLocations","shipData","chooseAxis","coordinate","generateCoordinate","generateShipLocation","isValidShipLocation","shipCoordinateSpan","placedShipsCoordinates","startCoordinate","shipLocationCoordinates","AudioButton","useState","muteToggle","setMuteToggle","src","button","querySelector","audio","paused","volume","play","pause","add","faVolumeMute","faVolumeUp","App","gameStart","setGameStart","initHumanPlayer","initCPUPlayer","input","inputData","ReactDOM","render","StrictMode"],"mappings":"kRAuBeA,EAvBC,CACZ,CACIC,KAAK,UACLC,OAAO,GAEX,CACID,KAAK,aACLC,OAAO,GAEX,CACID,KAAK,YACLC,OAAO,GAEX,CACID,KAAK,YACLC,OAAO,GAEX,CACID,KAAK,cACLC,OAAO,ICjBTC,E,4MACFC,YAAc,WACb,EAAKC,MAAMC,U,uDAGZ,OACC,qBAAKC,UAAU,QAAf,SACE,sBAAKA,UAAU,gBAAf,UACC,sBAAMA,UAAU,QAAQC,QAASC,KAAKL,YAAtC,sBACA,sBAAMG,UAAU,aAAhB,8BACA,sBAAKA,UAAU,YAAf,+FACoF,uBAAK,uBADzF,sSAKuG,uBAAK,uBAL5G,yGAMwG,uBAAK,uBAN7G,oF,GAVYG,aC+QLC,E,kDA1Qb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IAqBRO,UAAY,WACV,EAAKC,SAAS,CACbC,MAAO,EAAKC,MAAMD,QAxBF,EA6BnBE,WAAa,WACS,MAApB,EAAKD,MAAME,KACP,EAAKJ,SAAS,CAAEI,KAAM,MACtB,EAAKJ,SAAS,CAAEI,KAAM,OAhCT,EAmCnBC,YAAc,WAEZ,IADA,IAAIC,EAAY,GACPC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAUE,KAAKD,GAEjB,OAAO,EAAKE,YAAYH,IAxCP,EA0CnBG,YAAc,SAACH,GACb,OAAOA,EAAUI,KAAI,SAACC,GAAD,OACjB,EAAKT,MAAMU,cAAcC,SAASF,GAC9B,qBACIjB,UAAU,oBACViB,OAAQA,EACRG,GAAIH,IAER,qBACIjB,UAAU,OACVqB,YAAa,EAAKC,YAClBC,aAAc,EAAKC,YACnBvB,QAAS,EAAKJ,YACdoB,OAAQA,EACRG,GAAIH,QAxDC,EAyEnBQ,kBAAoB,SAACf,EAAKgB,EAAMC,GAG9B,GAAW,MAAPjB,EACJ,CACI,IAAK,IAAIG,EAAE,EAAEA,EAAEc,EAAWd,IAExB,GAAI,EAAKL,MAAMU,cAAcC,SAASS,SAASF,GAAOb,GACpD,OAAO,EAEX,OAAO,EAGT,IAAK,IAAIA,EAAE,EAAGA,EAAEc,EAAWd,IAEvB,GAAI,EAAKL,MAAMU,cAAcC,SAASS,SAASF,GAAU,EAAFb,GACnD,OAAO,EAEf,OAAO,GA3FQ,EA6FnBgB,kBAAoB,SAACC,EAAGJ,EAAOhB,GAC3B,GAAK,EAAKe,kBAAkBf,EAAKgB,EAAM,EAAKlB,MAAMuB,oBAAuB,EAAKC,yBAAyBtB,EAAMgB,GAOrG,OAHJI,EAAEG,OAAOC,UAAUnC,OAAO,oBAC1B,EAAKO,SAAS,CACV6B,YAAW,IALjB,EAAKC,mBAAmB1B,IA/FX,EA2HnBb,YAAc,WACN,EAAKW,MAAM2B,kBAEkDE,IAA3D,EAAK7B,MAAM8B,aAAa,EAAK9B,MAAM+B,iBAAiB,GAEtD,EAAKjC,UAAS,SAAAE,GACZ,IAAMgC,EAAahC,EAAMgC,WAAWC,OAAO,CACvCC,SAASlC,EAAMmC,gBACfC,aAAapC,EAAMqC,eAEjBN,EAAmB/B,EAAM+B,iBAAiB,EAGhD,MAAM,CACFC,aACAtB,cAJkBV,EAAMU,cAAcuB,OAAOjC,EAAMqC,cAKnDC,aAJiB,EAKjBP,uBAKN,EAAKjC,UAAS,SAAAE,GACZ,IAAMgC,EAAahC,EAAMgC,WAAWC,OAAO,CACvCC,SAASlC,EAAMmC,gBACfC,aAAapC,EAAMqC,eAEjBN,EAAmB/B,EAAM+B,iBAAiB,EAMhD,MAAM,CACFC,aACAD,mBACArB,cARkBV,EAAMU,cAAcuB,OAAOjC,EAAMqC,cASnDF,gBARoBnC,EAAM8B,aAAaC,GAAkB7C,KASzDqC,kBARsBvB,EAAM8B,aAAaC,GAAkB5C,OAS3DmD,aARiB,EASjBD,aARiB,SA3JZ,EA4KnBT,mBAAqB,SAAC1B,GACpB,IAAIqC,EAAsB,GAC1B,GAAY,MAARrC,EACJ,CACI,IACI,IAAIG,EAAI,EAAEA,EAAI,EAAKL,MAAM8B,aAAa,EAAK9B,MAAM+B,kBAAkB5C,OAAOkB,IAC1EkC,EAAoBjC,KAAKkC,OAAO,EAAKxC,MAAMsC,aAAejC,GAE5DkC,EAAoBE,SAAQ,SAACvB,GAAD,OAC1BwB,SAASC,eAAezB,GAAOQ,UAAUnC,OAAO,gBAElD,EAAKO,SAAS,CACZuC,aAAcE,EACdZ,YAAW,QAInB,CACI,IACI,IAAItB,EAAI,EAAEA,EAAI,EAAKL,MAAM8B,aAAa,EAAK9B,MAAM+B,kBAAkB5C,OAAOkB,IAC1EkC,EAAoBjC,KAAKkC,OAAO,EAAKxC,MAAMsC,aAAmB,EAAJjC,GAE5DkC,EAAoBE,SAAQ,SAACvB,GAAD,OAC1BwB,SAASC,eAAezB,GAAOQ,UAAUnC,OAAO,gBAElD,EAAKO,SAAS,CACZuC,aAAcE,EACdZ,YAAW,MArMnB,EAAK3B,MAAQ,CACXgC,WAAY,GACZY,WAAY,GACZd,aAAce,EACdd,iBAAkB,EAClBI,gBAAiBU,EAAW,GAAG3D,KAC/BqC,kBAAkBsB,EAAW,GAAG1D,OAChC2D,WAAW,EACX5C,KAAM,IACNyB,YAAY,EACZW,aAAc,EACdD,aAAc,GACd3B,cAAc,GACdX,MAAK,GAEP,EAAKe,YAAc,EAAKA,YAAYiC,KAAjB,gBACnB,EAAK/B,YAAc,EAAKA,YAAY+B,KAAjB,gBACnB,EAAK1D,YAAa,EAAKA,YAAY0D,KAAjB,gBAClB,EAAKC,uBAAyB,EAAKA,uBAAuBD,KAA5B,gBApBb,E,mEA2BIE,GACrBvD,KAAKI,SAAS,CAAC8C,WAAYK,EAAMxB,OAAOyB,U,+CAgCjBhD,EAAMgB,GAC7B,MAAa,MAAThB,EAECgB,EAAQ,EACPxB,KAAKM,MAAM8B,aAAapC,KAAKM,MAAM+B,kBAAkB5C,OAAQ,EAI/DiC,SAASF,EAAQ,GACfxB,KAAKM,MAAM8B,aAAapC,KAAKM,MAAM+B,kBAAkB5C,OAAQ,I,kCAoCzDmC,GAAI,IAAD,OACb5B,KAAKI,SACH,CACEwC,YAAahB,EAAEG,OAAO0B,WAAW1C,OAAOyC,QAE1C,kBACE,EAAK7B,kBACHC,EACAA,EAAEG,OAAO0B,WAAW1C,OAAOyC,MAC3B,EAAKlD,MAAME,W,oCAIJ,IAAD,OACZR,KAAKI,SAAS,IAAI,kBAChB,EAAKsD,0BAA0B,EAAKpD,MAAMsC,kB,gDAoFpBe,GACpB3D,KAAKM,MAAMqC,aAAalD,OAAS,GACnCO,KAAKM,MAAMqC,aAAaI,SAAQ,SAACa,GAC/B,IAAIC,EAAOb,SAASC,eAAeW,GAC/BC,EAAK7B,UAAU8B,SAAS,cAC1BD,EAAK7B,UAAUnC,OAAO,aACpBgE,EAAK7B,UAAU8B,SAAS,gBAC1BD,EAAK7B,UAAUnC,OAAO,kBAE1BG,KAAKI,SAAS,CACZuC,aAAc,MAEXK,SAASC,eAAeU,GAAQ3B,UAAUnC,OAAO,iB,+BAIxD,YAC4DsC,IAAzDnC,KAAKM,MAAM8B,aAAapC,KAAKM,MAAM+B,kBAEpC,uBAAMvC,UAAU,kCAAkCiE,SAAU/D,KAAKJ,MAAMoE,gBAAgBX,KACrFrD,MACA,EACAA,KAAKM,MAAMgC,WACXtC,KAAKM,MAAM4C,YAJb,UAME,uBAAOpD,UAAU,sBAAjB,6BACA,uBACEmE,KAAK,OACLnE,UAAU,kBACV0D,MAAOxD,KAAKM,MAAM4C,WAClBgB,SAAUlE,KAAKsD,yBACjB,uBACEW,KAAK,SACLnE,UAAU,eACV0D,MAAM,kBAGV,sBAAK1D,UAAU,mBAAf,UACE,sBAAMA,UAAU,QAAhB,wBACA,sBAAKA,UAAU,iBAAf,UACE,uBAAMA,UAAU,cAAhB,iCACqBE,KAAKM,MAAM8B,aAAapC,KAAKM,MAAM+B,kBAAkB7C,KAD1E,OAGA,uBACA,wBAAQM,UAAU,aAAaC,QAASC,KAAKG,UAA7C,mBAGA,yBAAQL,UAAU,aAAaC,QAASC,KAAKO,WAA7C,oBACUP,KAAKM,MAAME,QAEpBR,KAAKM,MAAMD,KAAO,cAAC,EAAD,CAAYR,OAAQG,KAAKG,YAAgB,QAE9D,qBAAKL,UAAU,kBAAf,SACE,cAAC,IAAD,CAAMA,UAAU,aAAaqE,MAAO,GAAIC,IAAK,EAA7C,SACGpE,KAAKS,yB,GAnQa4D,IAAMpE,W,+CCsNtBqE,MA5Nf,SAA+BC,EAAsBC,EAAoBC,EAAyBC,EAAqBC,GAGnH,IAyJIC,EAjIEC,EAAiB,WACnB,IADuB,EACnBC,EAAiBH,EAAYI,UAAUC,MADpB,cAENF,GAFM,IAEvB,2BAAkC,CAAC,IAA1BG,EAAyB,QAC9B,GAAGA,EAAKC,KAAKzF,OAAO,IAAMwF,EAAKE,SAAS,CAAC,IAAD,aAIpC,IAHA,IAAIC,EAAcH,EAAKC,KAAKD,EAAKC,KAAKzF,OAAO,GACzC4F,EAAeJ,EAAKK,SAASC,WAAU,SAAAN,GAAI,OAAIA,IAAOG,KACtDzE,EAAE,EACC0E,EAAe1E,EAAEsE,EAAKK,SAAS7F,QAAU4F,EAAe1E,GAAG,GAAE,CAChE,GAAI0E,EAAe1E,EAAEsE,EAAKK,SAAS7F,OAAO,CACtC,IAAI+B,EAAM6D,EAAe1E,EACzB,IAAKsE,EAAKC,KAAKjE,SAASgE,EAAKK,SAAS9D,IAClC,MAAM,CAAN,EAAOgE,EAAqCJ,EAAcH,EAAKK,SAAS9D,KAGhF,GAAI6D,EAAe1E,GAAG,EAAE,CACpB,IAAIa,EAAM6D,EAAe1E,EACzB,IAAKsE,EAAKC,KAAKjE,SAASgE,EAAKK,SAAS9D,IAClC,MAAM,CAAN,EAAOgE,EAAqCJ,EAAcH,EAAKK,SAAS9D,KAGhFb,KAjBgC,uCAHrB,8BAyBvB,OAAO8E,KAILD,EAAqC,SAACE,EAAOC,GAC/C,OAAID,EAAOC,EAEHA,EAAOD,EAAO,EACR,CACFlE,MAAMmE,EACNC,UAAU,SAGR,CACFpE,MAAMmE,EACNC,UAAU,QAIdF,EAAOC,EAAO,EACR,CACFnE,MAAMmE,EACNC,UAAU,QAGR,CACFpE,MAAMmE,EACNC,UAAU,OAKpBC,EAAsC,SAACrE,GAKzC,IAJA,IACIsE,EADAF,EAAUG,IAILpF,EAAE,EAAEA,EAAE,GAAGA,IAAI,CAElB,GAAa,QADbmF,EAAOE,EAAmBxE,EAAMoE,IAE5B,MAAO,CACHpE,MAAMsE,EAAOtE,MACboE,UAAUA,GAElBA,EAAUG,IAEd,OAAON,KAELM,EAAwB,WAC1B,IACIH,EAAU,GACd,OAFkBK,KAAKC,MAAsB,EAAhBD,KAAKE,WAG9B,KAAK,EACDP,EAAW,OACX,MACJ,KAAK,EACDA,EAAU,KACV,MACJ,KAAK,EACDA,EAAU,QACV,MACJ,KAAK,EACDA,EAAU,OACV,MACJ,QACIA,EAAU,mCAGlB,OAAOA,GAGLI,EAAqB,SAACxE,EAAMoE,GAC9B,IAAIQ,EAAkBzB,EAAYI,UAAUsB,MAC5C,MAAgB,SAAZT,IAAuBpE,EAAO,GAAG,IAAK,GAAKA,EAAM,GAAG,IAAM4E,EAAgB5E,EAAO,GAAG8E,OAC7E,CACH9E,MAAOA,EAAM,EACboE,UAAW,QAEH,UAAZA,IAAwBpE,EAAO,GAAG,IAAK,GAAKA,EAAM,EAAE,KAAO4E,EAAgB5E,EAAO,GAAG8E,OAC9E,CACH9E,MAAOA,EAAM,EACboE,UAAW,SAEH,OAAZA,GAAqBpE,EAAO,GAAI,GAAKA,EAAM,GAAG,IAAM4E,EAAgB5E,EAAM,GAAG8E,OACtE,CACH9E,MAAOA,EAAM,EACboE,UAAW,MAEH,SAAZA,GAAuBpE,EAAO,GAAI,IAAMA,EAAM,EAAE,KAAO4E,EAAgB5E,EAAM,GAAG8E,OACzE,CACH9E,MAAOA,EAAM,EACboE,UAAW,QAEZ,MAELH,EAAyB,WAC3B,IAAIc,EAAe5B,EAAYI,UAAUsB,MAAMG,QAAO,SAAA3C,GAAI,OAAKA,EAAKyC,UAEpE,MAAO,CACH9E,MAAO+E,EAFON,KAAKC,MAAMD,KAAKE,SAAWI,EAAe9G,SAErB+B,MACnCoE,UAAW,KAOfhB,EADAJ,IAAwBC,EA3JQ,SAACjD,GAE/B,GAA2B,KAAvBkD,EAA0B,CAC1B,IAAI+B,EAAgBT,EAAmBxE,EAAMkD,GAC3C,OAAsB,OAAlB+B,EACOA,EAEA5B,IAGf,OAAOgB,EAAqCrE,GAkJ/BkF,CAA6BnC,IAKjC,IAnJkB,WAE/B,IADA,IAAIoC,EAAWhC,EAAYI,UAAUC,MAC5BrE,EAAE,EAAEA,EAAEgG,EAAWlH,OAAOkB,IAC7B,GAAIgG,EAAWhG,GAAGuE,KAAKzF,OAAS,IAAMkH,EAAWhG,GAAGwE,SAChD,OAAOxE,EAEf,OAAQ,EA4IEiG,GAEW/B,IAGAY,IAEzBd,EAAYI,UAAU8B,YAAYjC,EAAiBpD,OACnD,IAAI6D,EAAeV,EAAYI,UAAU+B,YAAYlC,EAAiBpD,OAEtE,IAAsB,IAAlB6D,EAAoB,CAEpB,IAAI7C,EAASmC,EAAYI,UAAUC,MAAMK,GAAgB7F,KACzD,OAAGmF,EAAYI,UAAUgC,YAAY1B,GAC7BV,EAAYI,UAAUiC,sBAChB,CACFC,UAAU,EACVC,gBAAiB,kCACjB1F,MAAMoD,EAAiBpD,MACvB2F,aAAY,EACZC,kBAAiB,EACjBxB,UAAUhB,EAAiBgB,UAC3ByB,YAAY,2BAA2B7E,EAAS,KAI9C,CACFhB,MAAMoD,EAAiBpD,MACvB2F,aAAY,EACZC,kBAAiB,EACjBxB,UAAUhB,EAAiBgB,UAC3ByB,YAAY,2BAA2B7E,EAAS,KAKlD,CACFhB,MAAMoD,EAAiBpD,MACvB2F,aAAY,EACZC,kBAAiB,EACjBxB,UAAUhB,EAAiBgB,UAC3ByB,YAAY,gCAKpB,MAAM,CACF7F,MAAMoD,EAAiBpD,MACvB2F,aAAY,EACZC,kBAAiB,EACjBxB,UAAUhB,EAAiBgB,UAC3ByB,YAAY,oCCpNlBC,E,4MACF3H,YAAc,WACb,EAAKC,MAAMC,U,uDAGZ,OAAIG,KAAKJ,MAAM2H,YAEX,qBAAKzH,UAAU,gBAAf,SACE,sBAAKA,UAAU,kBAAf,UACA,sBAAMA,UAAU,aAAhB,SAA8BE,KAAKJ,MAAM4H,UACzC,wBAAQ1H,UAAU,gBAAgBC,QAAS,kBAAM0H,OAAOC,SAASC,QAAO,IAAxE,6BAOF,qBAAK7H,UAAU,gBAAf,SACE,sBAAKA,UAAU,oCAAf,UACA,sBAAMA,UAAU,mBAAhB,SAAoCE,KAAKJ,MAAM4H,UAC/C,wBAAQ1H,UAAU,gBAAgBC,QAAS,kBAAM0H,OAAOC,SAASC,QAAO,IAAxE,iC,GApBa1H,aCgQR2H,E,kDAzPX,WAAYhI,GACX,IAAD,8BACI,cAAMA,IAmBVa,YAAc,SAACoH,GAEX,IADA,IAAInH,EAAY,GACPC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAUE,KAAKD,GAEjB,MAAiB,UAAbkH,EACO,EAAKC,iBAAiBpH,GAEtB,EAAKqH,oBAAoBrH,IA5BxC,EA8BAqH,oBAAsB,SAACrH,GACnB,OAAOA,EAAUI,KAAI,SAACC,GAAD,OACjB,EAAKnB,MAAMoI,UAAUjD,UAAUsB,MAAMtF,GAAQuF,OACzC,EAAK1G,MAAMoI,UAAUjD,UAAUsB,MAAMtF,GAAQkH,QACzC,qBAEAnI,UAAU,+BACViB,OAAQA,EACRG,GAAIH,EAJJ,SAKI,cAAC,IAAD,CAAiBmH,KAAMC,QAG3B,qBAEArI,UAAU,0BACViB,OAAQA,EACRG,GAAIH,EAJJ,SAKI,cAAC,IAAD,CAAiBmH,KAAME,QAI/B,qBACItI,UAAU,gBACVqB,YAAa,EAAKC,YAClBC,aAAc,EAAKC,YACnBvB,QAAS,EAAKJ,YACdoB,OAAQA,EACRG,GAAIH,QAzDpB,EA6DE+G,iBAAmB,SAACpH,GAClB,OAAOA,EAAUI,KAAI,SAACC,GAAD,OACjB,EAAKnB,MAAM+E,YAAYI,UAAUsB,MAAMtF,GAAQkH,QAC3C,EAAKrI,MAAM+E,YAAYI,UAAUsB,MAAMtF,GAAQuF,OAE3C,qBACAxG,UAAU,0CACViB,OAAQA,EACRG,GAAIH,EAHJ,SAIG,cAAC,IAAD,CAAiBmH,KAAMC,QAG1B,qBACArI,UAAU,mCACViB,OAAQA,EACRG,GAAIH,IAET,EAAKnB,MAAM+E,YAAYI,UAAUsB,MAAMtF,GAAQuF,OAC9C,qBACIxG,UAAU,qCACViB,OAAQA,EACRG,GAAIH,EAHR,SAIO,cAAC,IAAD,CACAmH,KAAME,QAGT,qBACAtI,UAAU,2BACViB,OAAQA,EACRG,GAAIH,QA1FpB,EAoHEsH,MAAQ,SAAAC,GAAE,OAAI,IAAIC,SAAQ,SAAAC,GAAG,OAAIC,WAAWD,EAAKF,OAlH/C,EAAKhI,MAAM,CACPoI,YAAW,EACXzB,UAAS,EACTM,aAAY,EACZL,gBAAgB,GAChBtE,aAAa,EACbyE,YAAY,wBACZ7C,qBAAoB,EACpBC,0BAAyB,EACzBC,qBAAqB,GACrBH,uBAAuB,GAE3B,EAAKnD,YAAc,EAAKA,YAAYiC,KAAjB,gBACnB,EAAK/B,YAAc,EAAKA,YAAY+B,KAAjB,gBACnB,EAAK1D,YAAc,EAAKA,YAAY0D,KAAjB,gBAhBvB,E,wDA+FczB,GACL5B,KAAKM,MAAMoI,YACR9G,EAAEG,OAAOC,UAAU8B,SAAS,qBAE5BlC,EAAEG,OAAOC,UAAUnC,OAAO,mBAC1BG,KAAKI,SACL,CACIwC,YAAahB,EAAEG,OAAO0B,WAAW1C,OAAOyC,W,kCAK1C5B,GACL5B,KAAKM,MAAMoI,YACT9G,EAAEG,OAAOC,UAAU8B,SAAS,oBAE3BlC,EAAEG,OAAOC,UAAUnC,OAAO,qB,kCAOxB+B,GACL5B,KAAKM,MAAMoI,YACZ1I,KAAK2I,kBAAkBjH,SAASE,EAAEG,OAAO0B,WAAW1C,OAAOyC,U,iFAGzChC,G,gFAEtBxB,KAAKI,SAAS,CACVsI,YAAW,IAEXE,EAAe5I,KAAKJ,MAAMoI,UAAUjD,UACxC/E,KAAK6I,iBAAiBrH,EAAMoH,G,SACtB5I,KAAKqI,MAAM,M,WACbrI,KAAKM,MAAM2G,S,wDAEfjH,KAAKI,SAAS,CACViH,YAAa,iC,UAEXrH,KAAKqI,MAAM,M,aACbS,EAAexE,EACXtE,KAAKM,MAAMiE,sBACXvE,KAAKM,MAAMkE,oBACXxE,KAAKM,MAAMmE,yBACXzE,KAAKM,MAAMoE,qBACX1E,KAAKJ,MAAM+E,cAEFsC,S,iBAEbjH,KAAKI,SAAS,CACVmE,sBAAsBuE,EAAatH,MACnCgD,oBAAoBsE,EAAa3B,YACjC1C,yBAAyBqE,EAAa1B,iBACtC1C,qBAAqBoE,EAAalD,UAClCyB,YAAYyB,EAAazB,YACzBJ,UAAS,EACTC,gBAAgB4B,EAAa5B,gBAC7BK,aAAY,I,+BAIhBvH,KAAKI,SAAS,CACVmE,sBAAsBuE,EAAatH,MACnCgD,oBAAoBsE,EAAa3B,YACjC1C,yBAAyBqE,EAAa1B,iBACtC1C,qBAAqBoE,EAAalD,UAClCyB,YAAYyB,EAAazB,c,UAEvBrH,KAAKqI,MAAM,M,eACjBrI,KAAKI,SAAS,CACViH,YAAY,wBACZqB,YAAW,I,UAET1I,KAAKqI,MAAM,K,+IAIN7G,EAAMoH,GACrBA,EAAevC,MAAM7E,GAAO8E,QAAO,EACnC,IAAIyC,EAAkBH,EAAe9B,YAAYtF,GACjD,IAAuB,IAAnBuH,EAAqB,CACrB,IAAIvG,EAASoG,EAAe5D,MAAM+D,GAAiBvJ,KACnD,OAAIoJ,EAAe7B,YAAYgC,GACvBH,EAAe5B,uBAEfhH,KAAKI,SAAS,CACV6G,UAAS,EACTC,gBAAgB,oCAChBG,YAAY,4BAA4B7E,EAAS,OAE9C,IAIPxC,KAAKI,SAAS,CACViH,YAAY,4BAA4B7E,EAAS,OAE9C,IAKXxC,KAAKI,SAAS,CACViH,YAAY,qCAET,GASX,OAJArH,KAAKI,SAAS,CACViH,YAAY,0BAGT,I,+BAIX,OACI,sBAAKvH,UAAU,wBAAf,UACI,sBAAKA,UAAU,aAAf,UACI,sBAAMA,UAAU,QAAhB,wBACA,uBACA,sBAAMA,UAAU,cAAhB,SAA+BE,KAAKM,MAAM+G,iBAE7CrH,KAAKM,MAAM2G,SACR,cAAC,EAAD,CACIO,QAASxH,KAAKM,MAAM4G,gBACpBK,YAAavH,KAAKM,MAAMiH,cAAkB,KAClD,sBAAKzH,UAAU,sBAAf,UACI,sBAAKA,UAAU,cAAf,UACI,sBAAMA,UAAU,cAAhB,SAA+BE,KAAKJ,MAAM+E,YAAYnF,OACtD,cAAC,IAAD,CAAM2E,MAAO,GAAI6E,OAAQ,GAAI5E,IAAK,EAAlC,SACKpE,KAAKS,YAAY,cAG1B,sBAAKX,UAAU,gBAAf,UACI,sBAAMA,UAAU,cAAhB,0BACA,cAAC,IAAD,CAAMqE,MAAO,GAAI6E,OAAQ,GAAI5E,IAAK,EAAlC,SACKpE,KAAKS,YAAY,sB,GA9OpB4D,IAAMpE,WCmDjBgJ,E,WA1DX,WAAa5C,GAAO,oBAChBrG,KAAKqG,MAAQA,GAAS,GACjBrG,KAAKqG,MAAM5G,QAAQO,KAAKkJ,OAC7BlJ,KAAKgF,MAAQ,GACbhF,KAAKmJ,YAAY,G,mDAGjB,IAAK,IAAIxI,EAAE,EAAGA,EAAE,GAAGA,IACfX,KAAKqG,MAAM1F,GAAG,CACVsH,SAAQ,EACR3B,QAAO,EACP9E,MAAMb,K,gCAERsE,GAAM,IAAD,OACXA,EAAKK,SAASvC,SAAQ,SAAAvB,GAClB,EAAK6E,MAAM7E,GAAOyG,SAAQ,KAE9BjI,KAAKgF,MAAMpE,KAAKqE,K,kCAERzD,GAERxB,KAAKqG,MAAM7E,GAAO8E,QAAO,I,kCAGjB9E,GACR,IAAIxB,KAAKqG,MAAM7E,GAAO8E,SAAUtG,KAAKqG,MAAM7E,GAAOyG,QAY9C,OADAjI,KAAKmJ,YAAYvI,KAAKY,IACd,EAXR,IAAK,IAAIb,EAAE,EAAEA,EAAEX,KAAKgF,MAAMvF,OAAOkB,IAC7B,GAAIX,KAAKgF,MAAMrE,GAAG2E,SAASrE,SAASO,GAGhC,OAFA4H,QAAQC,IAAI,sBACZrJ,KAAKgF,MAAMrE,GAAG2I,IAAI9H,GACXb,I,kCAUXa,GACR,QAAGxB,KAAKgF,MAAMxD,GAAO2D,WAEjBnF,KAAKgF,MAAMuE,OAAO/H,EAAM,IACjB,K,4CAKX,OAA8B,IAAtBxB,KAAKgF,MAAMvF,aAA+B0C,IAAfnC,KAAKgF,U,KC3BjCwE,E,WApBX,WAAYhK,EAAK8F,GAAU,oBACvBtF,KAAKR,KAAKA,EACVQ,KAAKsF,SAASA,EACdtF,KAAKkF,KAAK,G,gDAGV1D,GAEIxB,KAAKsF,SAASrE,SAASO,IACvBxB,KAAKkF,KAAKtE,KAAKY,K,+BAEd,IAAD,OACJ,OAAOxB,KAAKsF,SAASmE,OAAM,SAACC,GAAD,OAC3B,EAAKxE,KAAKjE,SAASyI,U,KCiFZC,E,WA5FX,WAAYnK,EAAK8C,GAAY,oBACzBtC,KAAKR,KAAKA,EACVQ,KAAK+E,UAAU,IAAIkE,EACR,QAAPzJ,EACAQ,KAAK4J,eAEL5J,KAAK6J,gBAAgBvH,G,qDAEpBoF,EAAU3C,GAEpBA,EAAU+E,YAAYpC,K,sCAELpF,GACf,IAAD,OACIA,EAAWS,SAAQ,SAAAa,GACf,IAAIqB,EAAK,IAAIuE,EAAM5F,EAAQpB,SAASoB,EAAQlB,cAC5C,EAAKqC,UAAUgF,UAAU9E,Q,qCAI7B,IAAI+E,EAAUhK,KAAKiK,4BAA4B9G,GAC/CnD,KAAK6J,gBAAgBG,K,kDAEGE,GAAU,IAAD,OAC7BF,EAAQ,GAWZ,OAVAE,EAASnH,SAAQ,SAAAkC,GAGb,IAFA,IAAIzE,EAAO,EAAK2J,aACZC,EAAY,EAAKC,mBAAmB7J,EAAKyE,EAAKxF,SAC1C,EAAK8B,kBAAkB6I,EAAW5J,EAAKyE,EAAKxF,OAAOuK,IACvDI,EAAY,EAAKC,mBAAmB7J,EAAKyE,EAAKxF,QAClDuK,EAAQpJ,KAAK,CACT4B,SAAUyC,EAAKzF,KACfkD,aAAc,EAAK4H,qBAAqB9J,EAAK4J,EAAWnF,EAAKxF,aAG9DuK,I,mCAGP,OAAsC,IAAlC/D,KAAKC,MAAsB,EAAhBD,KAAKE,UACT,IACJ,M,yCAGQ3F,EAAKiB,GAGpB,IADA,IAAID,EAAMyE,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,MACxClG,KAAKuK,oBAAoB/I,EAAMhB,EAAKiB,IACxCD,EAAMyE,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,KAChD,OAAO1E,I,0CAESA,EAAMhB,EAAKiB,GAC3B,MAAW,MAAPjB,EAEQgB,EAAQ,EAAKC,GAAc,EAG5BC,SAASF,EAAQ,GAAKC,GAAa,I,wCAGhC2I,EAAW5J,EAAKiB,EAAWuI,GACzC,GAAuB,IAAnBA,EAAQvK,OACR,OAAO,EACX,IAAI+K,EAAqB,GACrBC,EAAwB,GAC5BT,EAAQjH,SAAQ,SAAAkC,GAAI,OAChBwF,EAAuBA,EAAuBlI,OAAO0C,EAAKvC,iBAE1D8H,EADS,MAAThK,EACqBR,KAAKsK,qBAAqB,IAAKF,EAAY3I,GAE3CzB,KAAKsK,qBAAqB,IAAKF,EAAY3I,GACpE,IAAK,IAAId,EAAE,EAAEA,EAAEc,EAAWd,IACtB,GAAI8J,EAAuBxJ,SAASuJ,EAAmB7J,IACnD,OAAO,EAEf,OAAO,I,2CAIUH,EAAKkK,EAAgBjJ,GACtC,IAAIkJ,EAA0B,GAC9B,GAAa,MAATnK,EAEA,IAAK,IAAIG,EAAE,EAAEA,EAAEc,EAAWd,IACtBgK,EAAwB/J,KAAK8J,EAAgB/J,QAGjD,IAAK,IAAIA,EAAE,EAAEA,EAAEc,EAAWd,IACtBgK,EAAwB/J,KAAK8J,EAAmB,EAAF/J,GACtD,OAAOgK,M,KC7DAC,MA7Bf,WAAwB,IAAD,EACeC,oBAAS,GADxB,mBACZC,EADY,KACDC,EADC,KAkBnB,OACC,sBAAKjL,UAAU,cAAf,UACE,uBAAOkL,IAAI,oFAGN,wBAAQlL,UAAU,cAAcC,QArBpB,WAChB,IAAMkL,EAAQjI,SAASkI,cAAc,gBAC/BC,EAAOnI,SAASkI,cAAc,SACpC9B,QAAQC,IAAI8B,GACRA,EAAMC,QACND,EAAME,OAAS,GACfF,EAAMG,OACNP,GAAc,KAGdI,EAAMI,QACNR,GAAc,IAGtBE,EAAOjJ,UAAUwJ,IAAI,SAOb,SACMV,EAAuD,cAAC,IAAD,CAAiB5C,KAAMuD,MAAhE,cAAC,IAAD,CAAiBvD,KAAMwD,YC8BxCC,MAhDf,WAAgB,IAAD,EACmBd,oBAAS,GAD5B,mBACNe,EADM,KACIC,EADJ,OAEyBhB,mBAAS,IAFlC,mBAENlG,EAFM,KAEMmH,EAFN,OAGqBjB,mBAAS,IAH9B,mBAGN7C,EAHM,KAGI+D,EAHJ,KA+Bb,OACE,sBAAKjM,UAAU,MAAf,UACE,cAAC,EAAD,IACA8L,EACE,cAAC,EAAD,CACEjH,YAAaA,EACbqD,UAAWA,IAGb,cAAC,EAAD,CACEhE,gBAlCgB,SAACgI,EAAMC,EAAU/I,GAkBvC,OAjBI8I,IAEFH,GAAa,GAEXC,EAAgB,IAAInC,EADL,KAAbzG,EAC0B,2BAGDA,EAH4B+I,IAKzDF,EAAc,IAAIpC,EAAO,SAQpB,YC7BXuC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpJ,SAASC,eAAe,W","file":"static/js/main.db36bc5e.chunk.js","sourcesContent":["const shipTypes=[\n    {\n        name:'Carrier',\n        length:5,\n    },\n    {\n        name:'Battleship',\n        length:4,\n    },\n    {\n        name:'Destroyer',\n        length:3,\n    },\n    {\n        name:'Submarine',\n        length:3,\n    },\n    {\n        name:'Patrol Boat',\n        length:2,\n    }\n];\n\nexport default shipTypes;","import React, { Component } from \"react\";\nexport default \nclass PopUp extends Component {\n    handleClick = () => {\n     this.props.toggle();\n    };\n    render() {\n    return (\n     <div className=\"modal\">\n       <div className=\"modal_content\">\n        <span className=\"close\" onClick={this.handleClick}>&times;    </span>\n        <span className='modalTitle'>Battleship Rules</span>\n        <div className='gameRules'>\n          Place all of your ships on the board, then input your name and press 'Start Game'.<br/><br/>\n          You begin your turn by clicking a tile on the enemy board (labeled 'Enemy Waters').\n          If you hit an enemy ship, you will see a bomb and the tile will turn grey.\n          If you miss, you will see a X.\n          After your shot registers, your opponent will choose a tile and simulate his turn in the same manner.<br/><br/>\n          Whenever you hit all of the tiles of an enemy ship, the game will display that you sunk an enemy ship.<br/><br/>\n          The first player to sink all of their opponent's ships wins the game.\n        </div>\n      </div>\n     </div>\n    );\n   }\n  }","import React from \"react\";\nimport Grid from \"react-css-grid\";\nimport ship_types from \"../helpers/ship_types\";\nimport PopUpRules from \"./PopUpRules\";\n\n\nclass SetupPlayerShips extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playerData: [],\n      playerName: '',\n      shipsToPlace: ship_types,\n      currentShipIndex: 0,\n      currentShipName: ship_types[0].name,\n      currentShipLength:ship_types[0].length,\n      gameReady: false,\n      axis: \"x\",\n      allowClick: false,\n      currentTile: -1,\n      shipTileSpan: [],\n      occupiedTiles:[],\n      seen:false,\n    };\n    this.handleHover = this.handleHover.bind(this);\n    this.handleLeave = this.handleLeave.bind(this);\n    this.handleClick= this.handleClick.bind(this);\n    this.handlePlayerNameChange = this.handlePlayerNameChange.bind(this);\n  }\n  togglePop = () => {\n    this.setState({\n     seen: !this.state.seen\n    });\n   };\n  handlePlayerNameChange(event) {\n    this.setState({playerName: event.target.value});  }\n  changeAxis = () => {\n    this.state.axis === \"x\"\n      ? this.setState({ axis: \"y\" })\n      : this.setState({ axis: \"x\" });\n  };\n\n  createBoard = () => {\n    let tileArray = [];\n    for (let i = 0; i < 64; i++) {\n      tileArray.push(i);\n    }\n    return this.occupyTiles(tileArray);\n  };\n  occupyTiles = (tileArray) => {\n    return tileArray.map((number) => (\n        this.state.occupiedTiles.includes(number)?(\n            <div\n                className=\"tile selectedTile\"\n                number={number}\n                id={number}\n      ></div>):(\n            <div\n                className=\"tile\"\n                onMouseOver={this.handleHover}\n                onMouseLeave={this.handleLeave}\n                onClick={this.handleClick}\n                number={number}\n                id={number}\n            ></div>)\n    ));\n  };\n  checkInvalidShipLocation(axis, index) {\n    if (axis === \"x\")\n      return (\n        (index % 8) +\n          this.state.shipsToPlace[this.state.currentShipIndex].length >8\n      );\n    else\n      return (\n        parseInt(index / 8) +\n          this.state.shipsToPlace[this.state.currentShipIndex].length >8\n      );\n  }\n  //return true if there is a collision\n  checkForCollision = (axis,index,shipLength) =>{\n    // if (this.state.occupiedTiles.length === 0)\n    //   return true;\n    if (axis==='x')\n    {\n        for (let i=1;i<shipLength;i++)\n        {\n          if (this.state.occupiedTiles.includes(parseInt(index)+i))\n            return true;\n        }\n        return false;\n    }\n    else\n      for (let i=1; i<shipLength;i++)\n      {\n          if (this.state.occupiedTiles.includes(parseInt(index)+(i*8)))\n              return true;\n      }\n      return false;\n  }\n  validShipPosition = (e, index, axis) => {\n      if (!this.checkForCollision(axis,index,this.state.currentShipLength) && !this.checkInvalidShipLocation(axis, index)) {\n        this.handleShipTileSpan(axis);\n      } else\n        {\n          e.target.classList.toggle(\"invalidTile\");\n          this.setState({\n              allowClick:false,\n          }); return;\n        }\n    } \n\n  handleHover(e) {\n    this.setState(\n      {\n        currentTile: e.target.attributes.number.value,\n      },\n      () =>\n        this.validShipPosition(\n          e,\n          e.target.attributes.number.value,\n          this.state.axis\n        )\n    );\n  }\n  handleLeave() {\n    this.setState({}, () =>\n      this.resetBoardBackgroundColor(this.state.currentTile)\n    );\n  }\n  handleClick = ()=>{\n      if (this.state.allowClick)\n      {\n        if (this.state.shipsToPlace[this.state.currentShipIndex+1] === undefined)\n        {\n          this.setState(state=> {\n            const playerData = state.playerData.concat({\n                shipName:state.currentShipName,\n                shipLocation:state.shipTileSpan,\n            });\n            const currentShipIndex = state.currentShipIndex+1;\n            const occupiedTiles = state.occupiedTiles.concat(state.shipTileSpan);\n            const currentTile = -1;\n            return{\n                playerData,\n                occupiedTiles,\n                currentTile,\n                currentShipIndex,\n            }\n        })\n        }\n        else{\n          this.setState(state=> {\n            const playerData = state.playerData.concat({\n                shipName:state.currentShipName,\n                shipLocation:state.shipTileSpan,\n            });\n            const currentShipIndex = state.currentShipIndex+1;\n            const occupiedTiles = state.occupiedTiles.concat(state.shipTileSpan);\n            const currentShipName = state.shipsToPlace[currentShipIndex].name;\n            const currentShipLength = state.shipsToPlace[currentShipIndex].length;\n            const currentTile = -1;\n            const shipTileSpan = [];\n            return{\n                playerData,\n                currentShipIndex,\n                occupiedTiles,\n                currentShipName,\n                currentShipLength,\n                currentTile,\n                shipTileSpan,\n            }\n        })\n        }\n      }\n      else\n        return\n      \n  }\n  handleShipTileSpan = (axis) =>{\n    let updatedShipTileSpan = [];\n    if (axis ==='x')\n    {\n        for (\n            let i = 0;i < this.state.shipsToPlace[this.state.currentShipIndex].length;i++) {\n            updatedShipTileSpan.push(Number(this.state.currentTile) + i);\n          }\n          updatedShipTileSpan.forEach((index) =>\n            document.getElementById(index).classList.toggle(\"validTile\")\n          );\n          this.setState({\n            shipTileSpan: updatedShipTileSpan,\n            allowClick:true,\n          });\n    }\n    else\n    {\n        for (\n            let i = 0;i < this.state.shipsToPlace[this.state.currentShipIndex].length;i++) {\n            updatedShipTileSpan.push(Number(this.state.currentTile) + i * 8);\n          }\n          updatedShipTileSpan.forEach((index) =>\n            document.getElementById(index).classList.toggle(\"validTile\")\n          );\n          this.setState({\n            shipTileSpan: updatedShipTileSpan,\n            allowClick:true,\n          });\n    }\n  }\n\n  resetBoardBackgroundColor(tileID) {\n    if (this.state.shipTileSpan.length > 0) {\n      this.state.shipTileSpan.forEach((element) => {\n        let tile = document.getElementById(element);\n        if (tile.classList.contains(\"validTile\"))\n          tile.classList.toggle(\"validTile\");\n        if (tile.classList.contains(\"invalidTile\"))\n          tile.classList.toggle(\"invalidTile\");\n      });\n      this.setState({\n        shipTileSpan: [],\n      });\n    } else document.getElementById(tileID).classList.toggle(\"invalidTile\");\n  }\n\n  render() {\n    return (\n      (this.state.shipsToPlace[this.state.currentShipIndex] === undefined) ?\n      \n      <form className='enterPlayerName flip-in-hor-top' onSubmit={this.props.handleGameStart.bind(\n        this,\n        true,\n        this.state.playerData,\n        this.state.playerName\n        )}>\n        <label className='enterPlayerNameSpan'>Enter your name</label>\n        <input \n          type='text' \n          className='playerNameInput' \n          value={this.state.playerName}\n          onChange={this.handlePlayerNameChange}></input>\n        <input \n          type=\"submit\" \n          className='submitButton'\n          value=\"Start Game\" />\n      </form>\n      :\n      <div className=\"displayContainer\">\n        <span className='title'>BATTLESHIP</span>\n        <div className=\"displayContent\">\n          <span className=\"displayText\">\n          Captain, place your {this.state.shipsToPlace[this.state.currentShipIndex].name}.\n          </span>\n          <br />\n          <button className=\"axisToggle\" onClick={this.togglePop}>\n            Rules\n          </button>\n          <button className=\"axisToggle\" onClick={this.changeAxis}>\n            Axis : {this.state.axis}\n          </button>\n          {this.state.seen ? <PopUpRules toggle={this.togglePop} /> : null}\n        </div>\n        <div className=\"playerShipSetup\">\n          <Grid className='playerGrid' width={60} gap={1}>\n            {this.createBoard()}\n          </Grid>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SetupPlayerShips;\n","function computerTurnGenerator(lastComputerShotIndex,lastComputerShotHit,lastComputerShotSunkShip,computerHitDirection,humanPlayer){\n\n    //Generates a calculated coordinate based on the opponent's last hit shot\n    const generateCalculatedCoordinate= (index)=>{\n          //If the computer is already firing toward a certain direction (expects ship to be there)\n          if (computerHitDirection!==''){\n              let calculatedIndex=calculateLegalMove(index,computerHitDirection);\n                if (calculatedIndex!==null)\n                    return calculatedIndex;\n                else\n                    return cheatToFindIndex();\n          }\n          else \n            return generateRandomDirectionAndCoordinate(index);\n\n    }\n    //Checks if there are ship that the computer hit but didn't sink (e.g. if enemy ships are neighbors)\n    const checkForHitButNotSunkShips = ()=>{\n        let humanShips=humanPlayer.gameboard.ships;\n        for (let i=0;i<humanShips.length;i++){\n            if (humanShips[i].hits.length > 0 && !humanShips[i].isSunk())\n                return i;\n        }\n        return -1;\n      }\n\n    //If there are ships that the computer hit but did not sink yet, the computer makes an 'educated' guess to where the rest of the ship is\n    const cheatToFindIndex=()=>{\n        let humanPlayerShips=humanPlayer.gameboard.ships;\n        for (let ship of humanPlayerShips){\n            if(ship.hits.length>0 && !ship.isSunk()){\n                let lastHitOnShip=ship.hits[ship.hits.length-1];\n                let indexOfHitShip=ship.position.findIndex(ship => ship===lastHitOnShip);\n                let i=1;\n                while (indexOfHitShip+i<ship.position.length || indexOfHitShip-i>-1){\n                    if (indexOfHitShip+i<ship.position.length){\n                        let index=indexOfHitShip+i;\n                        if (!ship.hits.includes(ship.position[index])){\n                            return generateDirectionBasedOffCoordinates(lastHitOnShip,ship.position[index]);\n                        }\n                    }\n                    if (indexOfHitShip-i>-1){\n                        let index=indexOfHitShip-i;\n                        if (!ship.hits.includes(ship.position[index])){\n                            return generateDirectionBasedOffCoordinates(lastHitOnShip,ship.position[index]);\n                        }\n                    }\n                    i++;\n                }\n            }\n        }\n        //If the function decides to fail for whatever reason\n        return generateRandomCoordinate();\n\n    }\n    //Recieves two indexes, generates the direction based on the relationship between the coordinates\n    const generateDirectionBasedOffCoordinates=(index1,index2)=>{\n        if (index1<index2){\n            //Either right or down\n            if (index2-index1<8)\n                return{\n                    index:index2,\n                    direction:'right',\n                }\n            else\n                return{\n                    index:index2,\n                    direction:'down',\n                }\n        }\n        else{\n            if (index1-index2<8)\n                return{\n                    index:index2,\n                    direction:'left',\n                }\n            else\n                return{\n                    index:index2,\n                    direction:'up',\n                }\n        }\n        \n    }\n    const generateRandomDirectionAndCoordinate= (index)=>{\n        let direction=generateRandomDirection();\n        let output;\n        //An ideal solution would be to create a thread that stops after 5 seconds of trying to find a calculated coordinate, seeing as the\n        //complexity of the for loop & function is very low and the probability for error is extremely small, I took this approach.\n        for (let i=0;i<30;i++){\n            output=calculateLegalMove(index,direction);\n            if (output!==null)\n                return {\n                    index:output.index,\n                    direction:direction\n                }\n            direction=generateRandomDirection();\n        }\n        return generateRandomCoordinate();\n    }\n    const generateRandomDirection=()=>{\n        let randomIndex = Math.floor(Math.random() * 4);\n        let direction='';\n        switch (randomIndex){\n            case 0:\n                direction= 'left';\n                break;\n            case 1:\n                direction='up';\n                break;\n            case 2:\n                direction='right';\n                break;\n            case 3:\n                direction='down';\n                break;\n            default:\n                direction='Generate random direction failed';\n                break;\n        }\n        return direction;\n    }\n    //Index is the last index that registered a hit, and we assume the ship is spanned across 'direction'\n    const calculateLegalMove = (index,direction)=>{\n        let humanBoardArray = humanPlayer.gameboard.board;\n        if (direction==='left' && (index -1)%8 !==7 && index-1>-1 && !humanBoardArray[index -1].isShot)\n            return {\n                index: index-1,\n                direction: 'left'\n                }\n        if (direction==='right' && (index +1)%8 !==0 && index+1<64 && !humanBoardArray[index +1].isShot)\n            return {\n                index: index+1,\n                direction: 'right'\n                }\n        if (direction==='up' && (index -8)>=0 && index-8>-1 && !humanBoardArray[index-8].isShot)\n            return {\n                index: index-8,\n                direction: 'up'\n                }\n        if (direction==='down' && (index +8)<=63 && index+8<64 && !humanBoardArray[index+8].isShot)\n            return {\n                index: index+8,\n                direction: 'down'\n                }\n        return null;\n      }\n    const generateRandomCoordinate=()=>{\n        let availableTiles=humanPlayer.gameboard.board.filter(tile => !tile.isShot);\n        let randomIndex = Math.floor(Math.random() * availableTiles.length);\n        return {\n            index: availableTiles[randomIndex].index,\n            direction: '',\n    }}\n\n    //Main function\n    let targetCoordinate;\n    //If the last shot hit a ship but didn't sink it yet\n    if (lastComputerShotHit && !lastComputerShotSunkShip){\n        targetCoordinate=generateCalculatedCoordinate(lastComputerShotIndex);\n    }\n    else {\n        //Checks if there are still ships that the computer hit, but didn't sink\n        let index=checkForHitButNotSunkShips();\n        if (index!==-1){\n            targetCoordinate=cheatToFindIndex();\n        }\n        else{\n            targetCoordinate=generateRandomCoordinate();\n    }}\n    humanPlayer.gameboard.recieveShot(targetCoordinate.index);\n    let indexOfHitShip=humanPlayer.gameboard.checkForHit(targetCoordinate.index);\n    //If the shot hit a ship\n    if (indexOfHitShip!==-1){\n        //We need to declare shipName here b/c if the ship sunk, it will be removed from ships when we call 'checkIfSunk'\n        let shipName=humanPlayer.gameboard.ships[indexOfHitShip].name;\n        if(humanPlayer.gameboard.checkIfSunk(indexOfHitShip)){\n            if (humanPlayer.gameboard.checkIfAllShipsSunk())\n                return{\n                    gameOver: true,\n                    gameOverMessage: 'Your opponent has won the game!',\n                    index:targetCoordinate.index,\n                    lastShotHit:true,\n                    lastShotSunkShip:true,\n                    direction:targetCoordinate.direction,\n                    displayText:'Your opponent sunk your '+shipName+\"!\"\n                }\n            //Shot sunk a ship, but more are still alive, eventually we will display which ship in 'displayText'\n            else\n                return{\n                    index:targetCoordinate.index,\n                    lastShotHit:true,\n                    lastShotSunkShip:true,\n                    direction:targetCoordinate.direction,\n                    displayText:'Your opponent sunk your '+shipName+\"!\"\n                }\n        }\n        //Shot hit but did not sink the ship\n        else\n            return{\n                index:targetCoordinate.index,\n                lastShotHit:true,\n                lastShotSunkShip:false,\n                direction:targetCoordinate.direction,\n                displayText:'Your opponent hit your ship!'\n            }\n    }\n    //Shot missed the ship\n    else\n        return{\n            index:targetCoordinate.index,\n            lastShotHit:false,\n            lastShotSunkShip:false,\n            direction:targetCoordinate.direction,\n            displayText:'Your opponent missed your ship!'\n        }\n    \n    \n}\n\nexport default computerTurnGenerator;","import React, { Component } from \"react\";\nexport default \nclass GameOver extends Component {\n    handleClick = () => {\n     this.props.toggle();\n    };\n    render() {\n    if (this.props.computerWon){\n      return(\n        <div className=\"gameOverModal\">\n          <div className=\"gameOverContent\">\n          <span className='modalTitle'>{this.props.message}</span>\n          <button className='newGameButton' onClick={() => window.location.reload(false)}>Play Again</button>\n          </div>\n      </div>\n      )\n    }\n    else{\n      return(\n        <div className=\"gameOverModal\">\n          <div className=\"gameOverContent playerWinnerModal\">\n          <span className='modalWinnerTitle'>{this.props.message}</span>\n          <button className='newGameButton' onClick={() => window.location.reload(false)}>Play Again</button>\n          </div>\n      </div>\n      )\n    \n   }}\n  }","import React from \"react\";\nimport Grid from \"react-css-grid\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes,faBomb} from '@fortawesome/free-solid-svg-icons'\nimport computerTurnGenerator from '../helpers/computerTurnGenerator'\nimport GameOver from './GameOver'\n\n\nclass GameHandler extends React.Component{\n    constructor(props)\n    {\n        super(props);\n        this.state={\n            activeTurn:false,\n            gameOver:false,\n            computerWon:false,\n            gameOverMessage:'',\n            currentTile:-1,\n            displayText:'Awaiting your move...',\n            lastComputerShotHit:false,\n            lastComputerShotSunkShip:false,\n            computerHitDirection:'',\n            lastComputerShotIndex:-1,\n        }\n        this.handleHover = this.handleHover.bind(this);\n        this.handleLeave = this.handleLeave.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n\n    }\n    \n    createBoard = (playerType) => {\n        let tileArray = [];\n        for (let i = 0; i < 64; i++) {\n          tileArray.push(i);\n        }\n        if (playerType==='human')\n            return this.occupyHumanTiles(tileArray);\n        else\n            return this.occupyComputerTiles(tileArray);\n      };\n    occupyComputerTiles = (tileArray) => {\n        return tileArray.map((number) => (\n            this.props.cpuPlayer.gameboard.board[number].isShot ?(\n                this.props.cpuPlayer.gameboard.board[number].hasShip? (\n                    <div\n                    //Shot a ship tile//\n                    className=\"gameboardTile hasShip isShot\"\n                    number={number}\n                    id={number}>\n                        <FontAwesomeIcon icon={faBomb} />\n                    </div>\n                    ):(\n                    <div\n                    //Missed hit tile//\n                    className=\"gameboardTile hasMissed\"\n                    number={number}\n                    id={number}>\n                        <FontAwesomeIcon icon={faTimes} />\n                    </div>\n                    )\n                ):(\n                <div\n                    className=\"gameboardTile\"\n                    onMouseOver={this.handleHover}\n                    onMouseLeave={this.handleLeave}\n                    onClick={this.handleClick}\n                    number={number}\n                    id={number}\n                ></div>)\n        ));\n      };\n      occupyHumanTiles = (tileArray) => {\n        return tileArray.map((number) => (\n            this.props.humanPlayer.gameboard.board[number].hasShip ?(\n                this.props.humanPlayer.gameboard.board[number].isShot ? (\n                    //can change selectedTile to something else\n                    <div\n                    className=\"gameboardTile hasShip isShot humanBoard\"\n                    number={number}\n                    id={number}>\n                       <FontAwesomeIcon icon={faBomb} /> \n                    </div>\n                ):(\n                    <div\n                    className=\"gameboardTile hasShip humanBoard\"\n                    number={number}\n                    id={number}/> \n                )\n            ):(this.props.humanPlayer.gameboard.board[number].isShot ? (\n                <div\n                    className=\"gameboardTile hasMissed humanBoard\"\n                    number={number}\n                    id={number}>\n                       <FontAwesomeIcon \n                       icon={faTimes} /> \n                    </div>\n                ):(\n                    <div\n                    className=\"gameboardTile humanBoard\"\n                    number={number}\n                    id={number}/> \n            ))\n            )\n        );\n      };\n      handleHover(e) {\n        if (!this.state.activeTurn){\n            if(!e.target.classList.contains('hoverEnemyBoard'))\n            {\n                e.target.classList.toggle('hoverEnemyBoard');\n                this.setState(\n                {\n                    currentTile: e.target.attributes.number.value,\n                });\n            }\n        }\n      }\n      handleLeave(e){\n        if (!this.state.activeTurn){\n            if(e.target.classList.contains('hoverEnemyBoard'))\n            {\n                e.target.classList.toggle('hoverEnemyBoard');\n            }\n        }\n      }\n      //Used as a delay to simulate enemy turn\n      timer = ms => new Promise(res => setTimeout(res, ms))\n\n      handleClick(e){\n        if (!this.state.activeTurn)\n            this.simulateGameRound(parseInt(e.target.attributes.number.value));\n      }\n\n      async simulateGameRound(index){\n        //Make sure page renders after this function\n        this.setState({\n            activeTurn:true,\n        })\n        let enemyGameboard=this.props.cpuPlayer.gameboard;\n        this.handlePlayerTurn(index,enemyGameboard);\n        await this.timer(1300);\n        if (this.state.gameOver)\n            return;\n        this.setState({\n            displayText: 'Your opponent is thinking...'\n        })\n        await this.timer(1300);\n        let computerTurn = computerTurnGenerator(\n                this.state.lastComputerShotIndex,\n                this.state.lastComputerShotHit,\n                this.state.lastComputerShotSunkShip,\n                this.state.computerHitDirection,\n                this.props.humanPlayer,\n        )\n        if (computerTurn.gameOver)\n        {\n            this.setState({\n                lastComputerShotIndex:computerTurn.index,\n                lastComputerShotHit:computerTurn.lastShotHit,\n                lastComputerShotSunkShip:computerTurn.lastShotSunkShip,\n                computerHitDirection:computerTurn.direction,\n                displayText:computerTurn.displayText,\n                gameOver:true,\n                gameOverMessage:computerTurn.gameOverMessage,\n                computerWon:true,\n            })\n        }\n        else{\n            this.setState({\n                lastComputerShotIndex:computerTurn.index,\n                lastComputerShotHit:computerTurn.lastShotHit,\n                lastComputerShotSunkShip:computerTurn.lastShotSunkShip,\n                computerHitDirection:computerTurn.direction,\n                displayText:computerTurn.displayText,\n            })\n            await this.timer(1300);\n            this.setState({\n                displayText:'Awaiting your move...',\n                activeTurn:false\n            })\n            await this.timer(100);\n        }\n        \n      }\n      handlePlayerTurn(index,enemyGameboard){\n        enemyGameboard.board[index].isShot=true;\n        let indexOfShotShip = enemyGameboard.checkForHit(index);\n        if (indexOfShotShip!==-1){\n            let shipName=enemyGameboard.ships[indexOfShotShip].name;\n            if (enemyGameboard.checkIfSunk(indexOfShotShip)){\n                if (enemyGameboard.checkIfAllShipsSunk())\n                {\n                    this.setState({\n                        gameOver:true,\n                        gameOverMessage:'Game Over! You beat the opponent!',\n                        displayText:\"You sunk your opponent's \"+shipName+\"!\",\n                    })\n                    return true;\n                }\n                else\n                {\n                    this.setState({\n                        displayText:\"You sunk your opponent's \"+shipName+\"!\",\n                    });\n                    return true;  \n                }\n            }\n            else{\n                //displayHitOnGameboard\n                this.setState({\n                    displayText:'You shot and hit an enemy ship!',\n                });\n                return true;\n            }\n        }\n        else{\n            //displayMissOnGameboard\n            this.setState({\n                displayText:'You shot and missed!',\n\n            });\n            return false;\n        }\n      }\n    render(){\n        return(\n            <div className='gameContainer fade-in'>\n                <div className='gameHeader'>\n                    <span className='title'>BATTLESHIP</span>\n                    <br/>\n                    <span className='displayText'>{this.state.displayText}</span>\n                </div>\n                {this.state.gameOver ? \n                    <GameOver \n                        message={this.state.gameOverMessage}\n                        computerWon={this.state.computerWon} /> : null}\n                <div className='gameboardsContainer'>\n                    <div className=\"playerBoard\">\n                        <span className='boardHeader'>{this.props.humanPlayer.name}</span>\n                        <Grid width={60} height={60} gap={1}>\n                            {this.createBoard('human')}\n                        </Grid>\n                    </div>\n                    <div className=\"computerBoard\">\n                        <span className='boardHeader'>Enemy Waters</span>\n                        <Grid width={60} height={60} gap={1}>\n                            {this.createBoard('cpu')}\n                        </Grid>\n                    </div>\n                </div>\n                \n            \n            </div>  \n        )\n    }\n    \n}\n\nexport default GameHandler","class Gameboard {\n    constructor (board){\n        this.board = board || [];\n        if (!this.board.length) this.init();\n        this.ships = [];\n        this.missedShots=[];\n    };\n    init(){\n        for (let i=0; i<64;i++){\n            this.board[i]={\n                hasShip:false,\n                isShot:false,\n                index:i,\n    }}};\n    placeShip(ship){\n        ship.position.forEach(index => {\n            this.board[index].hasShip=true;\n        });\n        this.ships.push(ship);\n    };\n    recieveShot(index) \n    {\n        this.board[index].isShot=true;\n    }\n    //If ship is hit, returns index of the ship in 'ships'. Otherwise, returns -1\n    checkForHit(index){\n        if (this.board[index].isShot && this.board[index].hasShip){\n            for (let i=0;i<this.ships.length;i++){\n                if (this.ships[i].position.includes(index)){\n                    console.log(\"We got a hit boys!\");\n                    this.ships[i].hit(index);\n                    return i;\n                }\n            }\n        }\n        else\n        {\n            this.missedShots.push(index);\n            return -1;\n        }\n    }\n    checkIfSunk(index){\n        if(this.ships[index].isSunk())\n        {\n            this.ships.splice(index,1);\n            return true;\n        }\n        return false;\n    }\n    checkIfAllShipsSunk(){\n        return (this.ships.length === 0 || this.ships === undefined);\n    }\n\n\n}\n\n\n\n\nexport default Gameboard","\n\nclass Ship{\n    constructor(name,position){\n        this.name=name;\n        this.position=position; //An array of the position on the grid\n        this.hits=[];\n    }\n\n    hit(index) \n    {\n        if (this.position.includes(index))\n            this.hits.push(index);\n    }\n    isSunk(){\n        return this.position.every((occupiedCell) =>\n        this.hits.includes(occupiedCell)\n    );\n    }\n\n\n}\n\nexport default Ship;","import Gameboard from \"./gameboard\";\nimport Ship from './ship'\nimport ship_types from '../helpers/ship_types'\n\nclass Player{\n    constructor(name,playerData){\n        this.name=name;\n        this.gameboard=new Gameboard();\n        if (name==='CPU')\n            this.initCPUBoard()\n        else\n            this.initPlayerBoard(playerData);\n    }\n    fireShot(location, gameboard) //The logic for whether the shot is legal should be in game function\n    {\n\t\t\tgameboard.receiveShot(location);\n\t}\n    initPlayerBoard(playerData)\n    {\n        playerData.forEach(element =>{\n            let ship=new Ship (element.shipName,element.shipLocation);\n            this.gameboard.placeShip(ship);\n        })\n    }\n    initCPUBoard(){\n        let cpuData = this.generateRandomShipLocations(ship_types);\n        this.initPlayerBoard(cpuData);\n    }\n    generateRandomShipLocations(shipData){\n        let cpuData=[];\n        shipData.forEach(ship =>{\n            let axis = this.chooseAxis();\n            let coordinate= this.generateCoordinate(axis,ship.length);\n            while (!this.checkForCollision(coordinate,axis,ship.length,cpuData))\n                coordinate= this.generateCoordinate(axis,ship.length);\n            cpuData.push({\n                shipName: ship.name,\n                shipLocation: this.generateShipLocation(axis,coordinate,ship.length)\n            })\n        })\n        return cpuData;\n    }\n    chooseAxis(){\n        if (Math.floor(Math.random() * 2) === 0)\n            return 'x';\n        return 'y';\n    }\n\n    generateCoordinate(axis,shipLength)\n    {\n        let index=Math.floor(Math.random() * Math.floor(64));\n        while (!this.isValidShipLocation(index,axis,shipLength))\n            index=Math.floor(Math.random() * Math.floor(64));\n        return index;\n    }\n    isValidShipLocation(index,axis,shipLength){\n        if (axis==='x')\n        {\n            return (index % 8) + shipLength <= 8\n        }\n        else\n            return parseInt(index / 8) + shipLength <=8;\n           \n    }\n    checkForCollision(coordinate,axis,shipLength,cpuData){\n        if (cpuData.length === 0)\n            return true;\n        let shipCoordinateSpan = [];\n        let placedShipsCoordinates= [];\n        cpuData.forEach(ship =>\n            placedShipsCoordinates=placedShipsCoordinates.concat(ship.shipLocation));\n        if (axis === 'x')\n            shipCoordinateSpan = this.generateShipLocation('x', coordinate, shipLength);\n        else\n            shipCoordinateSpan = this.generateShipLocation('y', coordinate, shipLength);\n        for (let i=0;i<shipLength;i++){\n            if (placedShipsCoordinates.includes(shipCoordinateSpan[i]))\n                return false;\n        }\n        return true;\n\n\n    }\n    generateShipLocation(axis,startCoordinate,shipLength){\n        let shipLocationCoordinates = []\n        if (axis === 'x')\n        {\n            for (let i=0;i<shipLength;i++)\n                shipLocationCoordinates.push(startCoordinate+i);\n        }\n        else\n            for (let i=0;i<shipLength;i++)\n                shipLocationCoordinates.push(startCoordinate+(i*8));\n        return shipLocationCoordinates;\n    }\n}\n\nexport default Player;","import React, {useState} from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faVolumeUp,faVolumeMute} from '@fortawesome/free-solid-svg-icons'\nfunction AudioButton() {\n    const [muteToggle,setMuteToggle]= useState(true);\n    const toggleMusic = () =>{\n        const button= document.querySelector(\".musicButton\");\n        const audio= document.querySelector(\"audio\");\n        console.log(audio);\n        if (audio.paused) {\n            audio.volume = 0.2;\n            audio.play();\n            setMuteToggle(false);      \n        } \n        else {\n            audio.pause();\n            setMuteToggle(true);      \n\n        }\n    button.classList.add(\"fade\");\n    };\n    return (\n     <div className=\"audioButton\">\n       <audio src=\"https://docs.google.com/uc?export=download&id=19EeVeupWVUwPUyP7iK3OM14Iz1YBaJuf\"></audio>\n            {/* <source src=\"https://docs.google.com/uc?export=download&id=19EeVeupWVUwPUyP7iK3OM14Iz1YBaJuf\"/> */}\n       {/* </audio> */}\n            <button className=\"musicButton\" onClick={toggleMusic}>\n                {!muteToggle ? (<FontAwesomeIcon icon={faVolumeUp} />) : <FontAwesomeIcon icon={faVolumeMute} />}\n            </button>\n     </div>\n    );\n}\nexport default AudioButton;","import './App.css';\nimport SetupPlayerShips from './components/SetupPlayerShips'\nimport React, {useState} from 'react';\nimport GameHandler from './components/GameHandler';\nimport Player from './factories/player'\nimport AudioButton from './components/AudioButton'\n\n\n\nfunction App() {\n  const [gameStart,setGameStart]= useState(false);\n  const [humanPlayer,initHumanPlayer] = useState({});\n  const [cpuPlayer,initCPUPlayer] = useState({});\n  // const [playerData,setPlayerData]= useState([]);\n  // const [playerName,setPlayerName]= useState('')\n\n  const handleGameStart = (input,inputData,playerName) =>{\n    if (input)\n    {\n      setGameStart(true);\n      if (playerName===''){\n        initHumanPlayer(new Player ('Bill Nye the Science Guy',inputData));\n      }\n      else{\n        initHumanPlayer(new Player(playerName,inputData));\n      }\n      initCPUPlayer(new Player('CPU'));\n\n      // setPlayerData(inputData);\n      // if (playerName === '')\n      //   setPlayerName('Bill Nye the Science Guy');\n      // else\n      //   setPlayerName(playerName);\n    }\n    return null;\n\n  }\n\n\n  \n  return (\n    <div className='App'>\n      <AudioButton/>{\n      gameStart ? \n        <GameHandler\n          humanPlayer={humanPlayer}\n          cpuPlayer={cpuPlayer}>\n        </GameHandler>\n      :\n        <SetupPlayerShips\n          handleGameStart={handleGameStart}>\n        </SetupPlayerShips>}\n    </div>\n  );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}