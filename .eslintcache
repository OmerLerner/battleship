[{"/home/olerner/The_Odin_Project/battleship/src/index.js":"1","/home/olerner/The_Odin_Project/battleship/src/App.js":"2","/home/olerner/The_Odin_Project/battleship/src/components/SetupPlayerShips.js":"3","/home/olerner/The_Odin_Project/battleship/src/helpers/ship_types.js":"4","/home/olerner/The_Odin_Project/battleship/src/helpers/player_data.js":"5","/home/olerner/The_Odin_Project/battleship/src/components/GameHandler.js":"6","/home/olerner/The_Odin_Project/battleship/src/factories/player.js":"7","/home/olerner/The_Odin_Project/battleship/src/factories/gameboard.js":"8","/home/olerner/The_Odin_Project/battleship/src/factories/ship.js":"9","/home/olerner/The_Odin_Project/battleship/src/helpers/computerTurnGenerator.js":"10"},{"size":220,"mtime":1608653260950,"results":"11","hashOfConfig":"12"},{"size":1383,"mtime":1609347087910,"results":"13","hashOfConfig":"12"},{"size":7783,"mtime":1609672396513,"results":"14","hashOfConfig":"12"},{"size":332,"mtime":1608827396818,"results":"15","hashOfConfig":"12"},{"size":46,"mtime":1609090218028,"results":"16","hashOfConfig":"12"},{"size":5233,"mtime":1609754630218,"results":"17","hashOfConfig":"12"},{"size":3178,"mtime":1609358816381,"results":"18","hashOfConfig":"12"},{"size":1456,"mtime":1609758978298,"results":"19","hashOfConfig":"12"},{"size":422,"mtime":1609677199442,"results":"20","hashOfConfig":"12"},{"size":8172,"mtime":1609775134725,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"5kgekf",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/olerner/The_Odin_Project/battleship/src/index.js",[],["45","46"],"/home/olerner/The_Odin_Project/battleship/src/App.js",["47"],"import './App.css';\nimport SetupPlayerShips from './components/SetupPlayerShips'\nimport React, {useState, useEffect} from 'react';\nimport GameHandler from './components/GameHandler';\nimport Player from './factories/player'\n\n\n\nfunction App() {\n  const [gameStart,setGameStart]= useState(false);\n  const [humanPlayer,initHumanPlayer] = useState({});\n  const [cpuPlayer,initCPUPlayer] = useState({});\n  // const [playerData,setPlayerData]= useState([]);\n  // const [playerName,setPlayerName]= useState('')\n\n  const handleGameStart = (input,inputData,playerName) =>{\n    if (input)\n    {\n      setGameStart(true);\n      if (playerName===''){\n        initHumanPlayer(new Player ('Bill Nye the Science Guy',inputData));\n      }\n      else{\n        initHumanPlayer(new Player(playerName,inputData));\n      }\n      initCPUPlayer(new Player('CPU'));\n\n      // setPlayerData(inputData);\n      // if (playerName === '')\n      //   setPlayerName('Bill Nye the Science Guy');\n      // else\n      //   setPlayerName(playerName);\n    }\n    return null;\n\n  }\n\n\n  \n  return (\n    gameStart ? \n    <div className='App'>\n      <GameHandler\n        humanPlayer={humanPlayer}\n        cpuPlayer={cpuPlayer}>\n      </GameHandler>\n    </div>\n    :\n    <div className=\"App\">\n      <SetupPlayerShips\n        handleGameStart={handleGameStart}>\n      </SetupPlayerShips>\n    </div>\n  );\n}\n\n\nexport default App;\n","/home/olerner/The_Odin_Project/battleship/src/components/SetupPlayerShips.js",["48","49","50"],"import React, { useState } from \"react\";\nimport Grid from \"react-css-grid\";\nimport ship_types from \"../helpers/ship_types\";\nimport player_data from '../helpers/player_data'\nimport playerData from \"../helpers/player_data\";\n\nclass SetupPlayerShips extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playerData: [],\n      playerName: '',\n      shipsToPlace: ship_types,\n      currentShipIndex: 0,\n      currentShipName: ship_types[0].name,\n      currentShipLength:ship_types[0].length,\n      gameReady: false,\n      axis: \"x\",\n      allowClick: false,\n      currentTile: -1,\n      shipTileSpan: [],\n      occupiedTiles:[],\n    };\n    this.handleHover = this.handleHover.bind(this);\n    this.handleLeave = this.handleLeave.bind(this);\n    this.handleClick= this.handleClick.bind(this);\n    this.handlePlayerNameChange = this.handlePlayerNameChange.bind(this);\n  }\n  handlePlayerNameChange(event) {\n    this.setState({playerName: event.target.value});  }\n  changeAxis = () => {\n    this.state.axis === \"x\"\n      ? this.setState({ axis: \"y\" })\n      : this.setState({ axis: \"x\" });\n  };\n\n  createBoard = () => {\n    let tileArray = [];\n    for (let i = 0; i < 64; i++) {\n      tileArray.push(i);\n    }\n    return this.occupyTiles(tileArray);\n  };\n  occupyTiles = (tileArray) => {\n    return tileArray.map((number) => (\n        this.state.occupiedTiles.includes(number)?(\n            <div\n                className=\"tile selectedTile\"\n                number={number}\n                id={number}\n      ></div>):(\n            <div\n                className=\"tile\"\n                onMouseOver={this.handleHover}\n                onMouseLeave={this.handleLeave}\n                onClick={this.handleClick}\n                number={number}\n                id={number}\n            ></div>)\n    ));\n  };\n  checkInvalidShipLocation(axis, index) {\n    if (axis === \"x\")\n      return (\n        (index % 8) +\n          this.state.shipsToPlace[this.state.currentShipIndex].length >8\n      );\n    else\n      return (\n        parseInt(index / 8) +\n          this.state.shipsToPlace[this.state.currentShipIndex].length >8\n      );\n  }\n  //return true if there is a collision\n  checkForCollision = (axis,index,shipLength) =>{\n    // if (this.state.occupiedTiles.length === 0)\n    //   return true;\n    if (axis==='x')\n    {\n        for (let i=1;i<shipLength;i++)\n        {\n          if (this.state.occupiedTiles.includes(parseInt(index)+i))\n            return true;\n        }\n        return false;\n    }\n    else\n      for (let i=1; i<shipLength;i++)\n      {\n          if (this.state.occupiedTiles.includes(parseInt(index)+(i*8)))\n              return true;\n      }\n      return false;\n  }\n  validShipPosition = (e, index, axis) => {\n      if (!this.checkForCollision(axis,index,this.state.currentShipLength) && !this.checkInvalidShipLocation(axis, index)) {\n        this.handleShipTileSpan(axis);\n      } else\n        {\n          e.target.classList.toggle(\"invalidTile\");\n          this.setState({\n              allowClick:false,\n          }); return;\n        }\n    } \n\n  handleHover(e) {\n    this.setState(\n      {\n        currentTile: e.target.attributes.number.value,\n      },\n      () =>\n        this.validShipPosition(\n          e,\n          e.target.attributes.number.value,\n          this.state.axis\n        )\n    );\n  }\n  handleLeave() {\n    this.setState({}, () =>\n      this.resetBoardBackgroundColor(this.state.currentTile)\n    );\n  }\n  handleClick = ()=>{\n      if (this.state.allowClick)\n      {\n        if (this.state.shipsToPlace[this.state.currentShipIndex+1] === undefined)\n        {\n          this.setState(state=> {\n            const playerData = state.playerData.concat({\n                shipName:state.currentShipName,\n                shipLocation:state.shipTileSpan,\n            });\n            const currentShipIndex = state.currentShipIndex+1;\n            const occupiedTiles = state.occupiedTiles.concat(state.shipTileSpan);\n            const currentTile = -1;\n            return{\n                playerData,\n                occupiedTiles,\n                currentTile,\n                currentShipIndex,\n            }\n        })\n        }\n        else{\n          this.setState(state=> {\n            const playerData = state.playerData.concat({\n                shipName:state.currentShipName,\n                shipLocation:state.shipTileSpan,\n            });\n            const currentShipIndex = state.currentShipIndex+1;\n            const occupiedTiles = state.occupiedTiles.concat(state.shipTileSpan);\n            const currentShipName = state.shipsToPlace[currentShipIndex].name;\n            const currentShipLength = state.shipsToPlace[currentShipIndex].length;\n            const currentTile = -1;\n            const shipTileSpan = [];\n            return{\n                playerData,\n                currentShipIndex,\n                occupiedTiles,\n                currentShipName,\n                currentShipLength,\n                currentTile,\n                shipTileSpan,\n            }\n        })\n        }\n      }\n      else\n        return\n      \n  }\n  handleShipTileSpan = (axis) =>{\n    let updatedShipTileSpan = [];\n    if (axis ==='x')\n    {\n        for (\n            let i = 0;i < this.state.shipsToPlace[this.state.currentShipIndex].length;i++) {\n            updatedShipTileSpan.push(Number(this.state.currentTile) + i);\n          }\n          updatedShipTileSpan.forEach((index) =>\n            document.getElementById(index).classList.toggle(\"validTile\")\n          );\n          this.setState({\n            shipTileSpan: updatedShipTileSpan,\n            allowClick:true,\n          });\n    }\n    else\n    {\n        for (\n            let i = 0;i < this.state.shipsToPlace[this.state.currentShipIndex].length;i++) {\n            updatedShipTileSpan.push(Number(this.state.currentTile) + i * 8);\n          }\n          updatedShipTileSpan.forEach((index) =>\n            document.getElementById(index).classList.toggle(\"validTile\")\n          );\n          this.setState({\n            shipTileSpan: updatedShipTileSpan,\n            allowClick:true,\n          });\n    }\n  }\n\n  resetBoardBackgroundColor(tileID) {\n    if (this.state.shipTileSpan.length > 0) {\n      this.state.shipTileSpan.forEach((element) => {\n        let tile = document.getElementById(element);\n        if (tile.classList.contains(\"validTile\"))\n          tile.classList.toggle(\"validTile\");\n        if (tile.classList.contains(\"invalidTile\"))\n          tile.classList.toggle(\"invalidTile\");\n      });\n      this.setState({\n        shipTileSpan: [],\n      });\n    } else document.getElementById(tileID).classList.toggle(\"invalidTile\");\n  }\n\n  render() {\n    return (\n      (this.state.shipsToPlace[this.state.currentShipIndex] === undefined) ?\n      \n      <form className='enterPlayerName' onSubmit={this.props.handleGameStart.bind(\n        this,\n        true,\n        this.state.playerData,\n        this.state.playerName\n        )}>\n        <label className='enterPlayerNameSpan'>Please enter your name</label>\n        <input \n          type='text' \n          id='playerNameInput' \n          value={this.state.playerName}\n          onChange={this.handlePlayerNameChange}></input>\n          <input type=\"submit\" value=\"Submit\" />\n      </form>\n      :\n      <div className=\"displayContainer\">\n        <div className=\"displayContent\">\n          <span className=\"displayText\">{this.state.currentShipIndex}</span>\n          <br />\n          <button className=\"axisToggle\" onClick={this.changeAxis}>\n            Axis : {this.state.axis}\n          </button>\n        </div>\n        <div className=\"playerShipSetup\">\n          <Grid width={60} gap={1}>\n            {this.createBoard()}\n          </Grid>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SetupPlayerShips;\n","/home/olerner/The_Odin_Project/battleship/src/helpers/ship_types.js",[],"/home/olerner/The_Odin_Project/battleship/src/helpers/player_data.js",[],"/home/olerner/The_Odin_Project/battleship/src/components/GameHandler.js",["51","52","53"],"/home/olerner/The_Odin_Project/battleship/src/factories/player.js",[],"/home/olerner/The_Odin_Project/battleship/src/factories/gameboard.js",[],"/home/olerner/The_Odin_Project/battleship/src/factories/ship.js",[],"/home/olerner/The_Odin_Project/battleship/src/helpers/computerTurnGenerator.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":3,"column":26,"nodeType":"60","messageId":"61","endLine":3,"endColumn":35},{"ruleId":"58","severity":1,"message":"62","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":25},{"ruleId":"58","severity":1,"message":"63","line":4,"column":8,"nodeType":"60","messageId":"61","endLine":4,"endColumn":19},{"ruleId":"58","severity":1,"message":"64","line":5,"column":8,"nodeType":"60","messageId":"61","endLine":5,"endColumn":18},{"ruleId":"58","severity":1,"message":"62","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":25},{"ruleId":"58","severity":1,"message":"65","line":3,"column":10,"nodeType":"60","messageId":"61","endLine":3,"endColumn":25},{"ruleId":"58","severity":1,"message":"66","line":4,"column":10,"nodeType":"60","messageId":"61","endLine":4,"endColumn":17},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'player_data' is defined but never used.","'playerData' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faTimes' is defined but never used.","no-global-assign","no-unsafe-negation"]